//! Copyright 2020 James Jessen. All rights reserved.
window.addEventListener('load',onLoad);window.addEventListener('resize',setCanvasSize);window.addEventListener('orientationchange',setCanvasSize);const container=document.getElementById('canvasContainer');const canvas=document.getElementById('circleCanvas');const ctx=canvas.getContext('2d');container.addEventListener('click',scrollToCanvas);const panicButton=document.getElementById('panicButton');panicButton.addEventListener('click',onPanicButtonPress);panicButton.addEventListener('touchstart',onPanicButtonPress);const breathButton=document.getElementById('breathButton');breathButton.addEventListener('mousedown',onButtonPress);breathButton.addEventListener('touchstart',onButtonPress);document.addEventListener('mouseup',onButtonRelease);document.addEventListener('touchend',onButtonRelease);document.addEventListener('touchcancel',onButtonRelease);const numberInputs={transitionSpeed:document.getElementById('transitionSpeedNumber'),holdDuration:document.getElementById('holdDurationNumber'),targetInhaleDuration:document.getElementById('targetInhaleDurationNumber'),targetHoldInhaleDuration:document.getElementById('targetHoldInhaleDurationNumber'),targetExhaleDuration:document.getElementById('targetExhaleDurationNumber'),targetHoldExhaleDuration:document.getElementById('targetHoldExhaleDurationNumber'),panicInhaleDuration:document.getElementById('panicInhaleDurationNumber'),panicHoldInhaleDuration:document.getElementById('panicHoldInhaleDurationNumber'),panicExhaleDuration:document.getElementById('panicExhaleDurationNumber'),panicHoldExhaleDuration:document.getElementById('panicHoldExhaleDurationNumber')};const sliderInputs={transitionSpeed:document.getElementById('transitionSpeedSlider'),holdDuration:document.getElementById('holdDurationSlider'),targetInhaleDuration:document.getElementById('targetInhaleDurationSlider'),targetHoldInhaleDuration:document.getElementById('targetHoldInhaleDurationSlider'),targetExhaleDuration:document.getElementById('targetExhaleDurationSlider'),targetHoldExhaleDuration:document.getElementById('targetHoldExhaleDurationSlider'),panicInhaleDuration:document.getElementById('panicInhaleDurationSlider'),panicHoldInhaleDuration:document.getElementById('panicHoldInhaleDurationSlider'),panicExhaleDuration:document.getElementById('panicExhaleDurationSlider'),panicHoldExhaleDuration:document.getElementById('panicHoldExhaleDurationSlider')};const settingsContainer=document.getElementById('settings');settingsContainer.addEventListener('input',onSettingInput);const donut={ratio:{hole:1/3.5,font:1/Math.pow(2,4),padding:1/Math.pow(2,4),lineWidth:1/Math.pow(2,6),},color:{breath:'cornflowerblue',empty:'#202020',hold:'dodgerblue',hole:'midnightblue',line:'white',text:'rgba(255, 255, 255, 0.9)'},center:{},radius:{},text:{}};const millisecondsPerSecond=1000;const circleRadians=2*Math.PI;const topRadians=1.5*Math.PI;let transitionSpeed;let assumedHoldDuration;const panicPattern={};const targetPattern={};const currentPattern={};const states={inhale:'inhale',holdInhale:'holdInhale',exhale:'exhale',holdExhale:'holdExhale'};function*stateGenerator(){while(!0){yield states.inhale;yield states.holdInhale;yield states.exhale;yield states.holdExhale;if(!isTargetReached)updateTimings()}}
const state={next:function(){this.name=this.generator.next().value;this.startTime=undefined}};const isDebugging=!1;function debugLog(message){if(isDebugging)console.log(message)}
function logPattern(pattern,name=''){let str=name+' Pattern\n';str+='-'.repeat(str.length-1)+'\n';str+='Inhale Duration: \t'+Math.round(pattern.inhaleDuration)+' ms\n';str+='Hold Inhale Duration: \t'+Math.round(pattern.holdInhaleDuration)+' ms\n';str+='Exhale Duration: \t'+Math.round(pattern.exhaleDuration)+' ms\n';str+='Hold Exhale Duration: \t'+Math.round(pattern.holdExhaleDuration)+' ms';debugLog(str)}
let isTargetReached=!1;function scrollToCanvas(){setCanvasSize();container.scrollIntoView({behavior:"smooth",block:"center"})}
function copyObjectProperties(from,to){Object.entries(from).forEach(([key,value])=>to[key]=value)}
function setCurrentToTarget(){copyObjectProperties(targetPattern,currentPattern);isTargetReached=!0;logPattern(currentPattern,'Current')}
function setCurrentToPanic(){copyObjectProperties(panicPattern,currentPattern);isTargetReached=!1;logPattern(currentPattern,'Current')}
function updateTimings(){let diffs={};let totalDeviation=0;for(const key of Object.keys(currentPattern)){const diff=targetPattern[key]-currentPattern[key];diffs[key]=diff;totalDeviation+=Math.abs(diff)}
if(totalDeviation===0){debugLog('Reached target breathing pattern.');isTargetReached=!0;return}
for(const key of Object.keys(currentPattern)){const diff=diffs[key];const absDiff=Math.abs(diff);const maxChange=(absDiff/totalDeviation)*transitionSpeed;currentPattern[key]+=Math.sign(diff)*Math.min(absDiff,maxChange)}
logPattern(currentPattern,'Current')}
function onLoad(){loadSettings();setCanvasSize();setCurrentToTarget();state.generator=stateGenerator();state.next();window.requestAnimationFrame(draw)}
function start(){state.generator=stateGenerator();state.next();state.next();state.next();window.requestAnimationFrame(draw)}
function readSetting(input){const name=input.className;const duration=parseFloat(input.value)*millisecondsPerSecond;if(name.startsWith('target')){targetPattern[input.dataset.state]=duration;isTargetReached=!1}else if(name.startsWith('panic')){panicPattern[input.dataset.state]=duration}else if(name==='transitionSpeed'){transitionSpeed=duration}else if(name==='holdDuration'){assumedHoldDuration=duration}}
function onSettingInput(event){const input=event.target;if(!input.checkValidity())return;switch(input.type){case 'range':input.previousElementSibling.value=input.value;break;case 'number':input.nextElementSibling.value=input.value;break;default:throw 'Unexpected input type.'}
readSetting(input);localStorage.setItem(input.className,input.value);debugLog(input.className+' => '+input.value)}
function loadSettings(){for(const input of Object.values(numberInputs)){const savedValue=localStorage.getItem(input.className);if(savedValue)input.value=savedValue;readSetting(input)}
for(const input of Object.values(sliderInputs)){const savedValue=localStorage.getItem(input.className);if(savedValue)input.value=savedValue}
logPattern(targetPattern,'Target');logPattern(panicPattern,'Panic')}
function onPanicButtonPress(event){event.preventDefault();setCurrentToPanic();scrollToCanvas();state.generator=stateGenerator();window.requestAnimationFrame(draw)}
let inhaleStartTime;let inhaleEndTime;let nonInhaleStartTime;let nonInhaleEndTime;let isInputting=!1;const breathButtonText=breathButton.textContent;function onButtonPress(event){event.preventDefault();const now=Date.now();breathButton.classList.remove("exhaling");breathButton.classList.add("inhaling");breathButton.textContent='Inhaling';if(!isInputting){isInputting=!0;isTargetReached=!1;inhaleStartTime=undefined}else{inhaleStartTime=now;nonInhaleEndTime=now}}
function onButtonRelease(event){if(!isInputting)return;event.preventDefault();const now=Date.now();breathButton.classList.remove("inhaling");if(!inhaleStartTime){breathButton.classList.add("exhaling");breathButton.textContent='Exhaling';nonInhaleStartTime=now}else{breathButton.classList.remove("exhaling");breathButton.textContent=breathButtonText;inhaleEndTime=now;isInputting=!1;setCurrentFromInput();scrollToCanvas();start()}}
function setCurrentFromInput(){const nonInhaleDuration=nonInhaleEndTime-nonInhaleStartTime;const totalHoldDuration=2*assumedHoldDuration;currentPattern.inhaleDuration=Math.max(inhaleEndTime-inhaleStartTime,100);currentPattern.holdInhaleDuration=assumedHoldDuration;currentPattern.exhaleDuration=Math.max(nonInhaleDuration-totalHoldDuration,100);currentPattern.holdExhaleDuration=assumedHoldDuration;logPattern(currentPattern,'Current')}
let savedWidth;let savedHeight;const heightTolerance=50;function setCanvasSize(event){const width=document.documentElement.clientWidth;if(!event){var height=window.innerHeight;if(width===savedWidth&&height===savedHeight)return}else{var height=document.documentElement.clientHeight;if(width===savedWidth&&Math.abs(height-savedHeight)<heightTolerance)return}
savedWidth=width;savedHeight=height;container.style.width=width+'px';container.style.height=height+'px';canvas.style.width=width+'px';canvas.style.height=height+'px';var scale=window.devicePixelRatio;canvas.width=Math.floor(width*scale);canvas.height=Math.floor(height*scale);ctx.scale(scale,scale);const radius=Math.min(width,height);const fontSize=radius*donut.ratio.font;const padding=radius*donut.ratio.padding;const lineWidth=radius*donut.ratio.lineWidth;const halfLineWidth=lineWidth/2;ctx.strokeStyle=donut.color.line;ctx.lineCap='round';ctx.textAlign='center';ctx.font=fontSize+'px Arial';donut.center.x=width/2;donut.center.y=height/2;donut.thickLineWidth=lineWidth;donut.thinLineWidth=halfLineWidth;donut.radius.max=(radius-padding-lineWidth)/2;donut.radius.min=donut.radius.max*donut.ratio.hole;donut.radius.range=donut.radius.max-donut.radius.min;const midRadius=(donut.radius.min+donut.radius.max)/2;donut.text.x=donut.center.x;donut.text.y=donut.center.y+midRadius;donut.radius.outerLine=donut.radius.max+halfLineWidth;donut.radius.innerLine=donut.radius.min-halfLineWidth}
function draw(timeNow){if(isInputting)return;if(!state.startTime)state.startTime=timeNow;const timeElapsed=timeNow-state.startTime;switch(state.name){case states.inhale:var text='Inhale';var targetDuration=currentPattern.inhaleDuration;var breathFraction=Math.min(timeElapsed/targetDuration,1);var holdFraction=0;break;case states.holdInhale:var text='Hold';var targetDuration=currentPattern.holdInhaleDuration;var holdFraction=Math.min(timeElapsed/targetDuration,1);var breathFraction=1;break;case states.exhale:var text='Exhale';var targetDuration=currentPattern.exhaleDuration;var breathFraction=1-Math.min(timeElapsed/targetDuration,1);var holdFraction=1;break;case states.holdExhale:var text='Hold';var targetDuration=currentPattern.holdExhaleDuration;var holdFraction=1-Math.min(timeElapsed/targetDuration,1);var breathFraction=0;break;default:throw 'Alien breathing phase.'}
const timeRemaining=targetDuration-timeElapsed;const breathRadius=donut.radius.min+(donut.radius.range*breathFraction);const holdRadians=topRadians+(circleRadians*holdFraction);ctx.clearRect(0,0,canvas.width,canvas.height);ctx.lineWidth=donut.thickLineWidth;ctx.beginPath();ctx.arc(donut.center.x,donut.center.y,donut.radius.outerLine,0,circleRadians);ctx.fillStyle=donut.color.empty;ctx.fill();ctx.stroke();ctx.beginPath();ctx.arc(donut.center.x,donut.center.y,breathRadius,0,circleRadians);ctx.fillStyle=donut.color.breath;ctx.fill();ctx.beginPath();ctx.arc(donut.center.x,donut.center.y,donut.radius.innerLine,0,circleRadians);ctx.fillStyle=donut.color.hole;ctx.fill();ctx.beginPath();ctx.moveTo(donut.center.x,donut.center.y-donut.radius.innerLine);ctx.lineTo(donut.center.x,donut.center.y);ctx.arc(donut.center.x,donut.center.y,donut.radius.innerLine,topRadians,holdRadians);ctx.lineTo(donut.center.x,donut.center.y);ctx.fillStyle=donut.color.hold;ctx.fill();ctx.lineWidth=donut.thinLineWidth;ctx.stroke();ctx.beginPath();ctx.arc(donut.center.x,donut.center.y,donut.radius.innerLine,0,circleRadians);ctx.lineWidth=donut.thickLineWidth;ctx.stroke();if(!isTargetReached){ctx.fillStyle=donut.color.text;ctx.fillText(text,donut.text.x,donut.text.y)}
if(timeRemaining<=0)state.next();window.requestAnimationFrame(draw)}